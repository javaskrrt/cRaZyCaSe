{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * mOcKcAsE - Transform your boring strings into mOcKcAsE strings!\n *\n * @param {string} input - The string to transform into mOcKcAsE.\n * @param {object} [options] - Configuration options.\n * @param {boolean} [options.capitalizeFirst=false] - Whether the first character should be uppercase.\n *\n * @returns {string} The mOcKcAsE version of the input string.\n */\n\nexport interface MockCaseOptions {\n  capitalizeFirst?: boolean;\n}\n\nexport function mOcKcAsE(input: string, options: MockCaseOptions = {}): string {\n  const { capitalizeFirst = false } = options;\n\n  // Two patterns:\n  // If capitalizeFirst = false (default):\n  // index=0 => lowercase, index=1 => uppercase, index=2 => lowercase, etc.\n  //\n  // If capitalizeFirst = true:\n  // index=0 => uppercase, index=1 => lowercase, index=2 => uppercase, etc.\n  //\n  // Essentially we alternate between uppercase and lowercase starting from the first character.\n\n  return input\n    .split(\"\")\n    .map((char, index) => {\n      const isEvenIndex = index % 2 === 0;\n      if (!capitalizeFirst) {\n        // even -> lower, odd -> upper\n        return isEvenIndex ? char.toLowerCase() : char.toUpperCase();\n      } else {\n        // even -> upper, odd -> lower\n        return isEvenIndex ? char.toUpperCase() : char.toLowerCase();\n      }\n    })\n    .join(\"\");\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAcO,SAAS,SAAS,OAAe,UAA2B,CAAC,GAAW;AAC7E,QAAM,EAAE,kBAAkB,MAAM,IAAI;AAWpC,SAAO,MACJ,MAAM,EAAE,EACR,IAAI,CAAC,MAAM,UAAU;AACpB,UAAM,cAAc,QAAQ,MAAM;AAClC,QAAI,CAAC,iBAAiB;AAEpB,aAAO,cAAc,KAAK,YAAY,IAAI,KAAK,YAAY;AAAA,IAC7D,OAAO;AAEL,aAAO,cAAc,KAAK,YAAY,IAAI,KAAK,YAAY;AAAA,IAC7D;AAAA,EACF,CAAC,EACA,KAAK,EAAE;AACZ;","names":[]}